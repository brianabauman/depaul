(3) Timing - Part 1

	a) With a low number of 50 and a high number of 75, the generateList() method took 0.38 self seconds.
	b) With a low number of 50 and a high number of 75, the generateTree() method took 0.19 self seconds.

(4) Timing - Part 2

	a) With a low number of 50 and a high number of 75, the generateList() method took 0.12 self seconds.
	b) With a low number of 50 and a high number of 75, the generateTree() method took 0.15 self seconds. 

(5) Parts of an executable

	a) This variable cannot be located in any of the ELF sections. Because it is a local variable to the obtainNumberBetween function, it exists on either the runtime stack or active registers during execution.

	b) objdump -d -j .rodata assign1-0

           assign1-0:     file format elf64-x86-64

           Disassembly of section .rodata:

           0000000000400de8 <_IO_stdin_used>:
             400de8:	01 00 02 00 00 00 00 00                             ........

           0000000000400df0 <__dso_handle>:
                   ...
             400df8:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 25 73 20     Please enter %s 
             400e08:	28 62 65 74 77 65 65 6e 20 25 64 20 61 6e 64 20     (between %d and 
             400e18:	25 64 29 3a 20 00 00 00 57 68 61 74 20 77 6f 75     %d): ...What wou
             400e28:	6c 64 20 79 6f 75 20 6c 69 6b 65 20 74 6f 20 64     ld you like to d
             400e38:	6f 3f 0a 28 31 29 20 43 6f 75 6e 74 20 77 69 74     o?.(1) Count wit
             400e48:	68 20 61 20 6c 69 73 74 0a 28 32 29 20 43 6f 75     h a list.(2) Cou
             400e58:	6e 74 20 77 69 74 68 20 61 20 74 72 65 65 0a 28     nt with a tree.(
             400e68:	30 29 20 51 75 69 74 0a 59 6f 75 72 20 63 68 6f     0) Quit.Your cho
             400e78:	69 63 65 20 00 74 68 65 20 6c 6f 77 20 6e 75 6d     ice .the low num
             400e88:	62 65 72 00 74 68 65 20 68 69 67 68 20 6e 75 6d     ber.the high num
             400e98:	62 65 72 00 74 68 65 20 6e 75 6d 62 65 72 20 6f     ber.the number o
             400ea8:	66 20 6e 75 6d 62 65 72 73 00 25 73 00 25 64 3a     f numbers.%s.%d:
             400eb8:	20 25 64 20 74 69 6d 65 28 73 29 0a 00 25 64 3a      %d time(s)..%d:
             400ec8:	20 25 64 20 74 69 6d 65 28 73 29 0a 00               %d time(s)..

	c) objdump -d -j .text assign1-0

           00000000004007ed <getNextNumber>:
             4007ed:	55                   	push   %rbp
             4007ee:	48 89 e5             	mov    %rsp,%rbp
             4007f1:	e8 9a fe ff ff       	callq  400690 <mcount@plt>
             4007f6:	e8 b5 fe ff ff       	callq  4006b0 <rand@plt>
             4007fb:	8b 0d 97 18 20 00    	mov    0x201897(%rip),%ecx        # 602098 <high>
             400801:	8b 15 95 18 20 00    	mov    0x201895(%rip),%edx        # 60209c <low>
             400807:	29 d1                	sub    %edx,%ecx
             400809:	89 ca                	mov    %ecx,%edx
             40080b:	8d 4a 01             	lea    0x1(%rdx),%ecx
             40080e:	99                   	cltd   
             40080f:	f7 f9                	idiv   %ecx
             400811:	8b 05 85 18 20 00    	mov    0x201885(%rip),%eax        # 60209c <low>
             400817:	01 d0                	add    %edx,%eax
             400819:	5d                   	pop    %rbp
             40081a:	c3                   	retq   

	d) objdump -d -j .bss assign1-0
	
           assign1-0:     file format elf64-x86-64

           Disassembly of section .bss:

           0000000000602080 <stdin@@GLIBC_2.2.5>:
           ...

           0000000000602090 <called.4232>:
             602090:	00 00 00 00                                         ....

           0000000000602094 <completed.6345>:
             602094:	00 00 00 00                                         ....

           0000000000602098 <high>:
             602098:	00 00 00 00                                         ....

           000000000060209c <low>:
             60209c:	00 00 00 00                                         ....

(6) Compiler optimizations

	- In the printTree() method, the optimized code stores local variables in the registers rather than referencing the stack. See instructions 400c6e and 400c72 in the original code, for example.

	  Original method (O0):
	
	  0000000000400c61 <printTree>:
            400c61:	55                   	push   %rbp
            400c62:	48 89 e5             	mov    %rsp,%rbp
            400c65:	48 83 ec 10          	sub    $0x10,%rsp
            400c69:	e8 22 fa ff ff       	callq  400690 <mcount@plt>
            400c6e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
            400c72:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
            400c77:	74 3e                	je     400cb7 <printTree+0x56>
            400c79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            400c7d:	48 8b 40 08          	mov    0x8(%rax),%rax
            400c81:	48 89 c7             	mov    %rax,%rdi
            400c84:	e8 d8 ff ff ff       	callq  400c61 <printTree>
            400c89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            400c8d:	8b 50 04             	mov    0x4(%rax),%edx
            400c90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            400c94:	8b 00                	mov    (%rax),%eax
            400c96:	89 c6                	mov    %eax,%esi
            400c98:	bf c5 0e 40 00       	mov    $0x400ec5,%edi
            400c9d:	b8 00 00 00 00       	mov    $0x0,%eax
            400ca2:	e8 79 f9 ff ff       	callq  400620 <printf@plt>
            400ca7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
            400cab:	48 8b 40 10          	mov    0x10(%rax),%rax
            400caf:	48 89 c7             	mov    %rax,%rdi
            400cb2:	e8 aa ff ff ff       	callq  400c61 <printTree>
            400cb7:	c9                   	leaveq 
            400cb8:	c3                   	retq   
	
	  Optimized method (O2):

	  0000000000400aa0 <printTree>:
            400aa0:	55                   	push   %rbp
            400aa1:	48 89 e5             	mov    %rsp,%rbp
            400aa4:	53                   	push   %rbx
            400aa5:	48 83 ec 08          	sub    $0x8,%rsp
            400aa9:	e8 e2 fb ff ff       	callq  400690 <mcount@plt>
            400aae:	48 85 ff             	test   %rdi,%rdi
            400ab1:	48 89 fb             	mov    %rdi,%rbx
            400ab4:	74 2d                	je     400ae3 <printTree+0x43>
            400ab6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
            400abd:	00 00 00 
            400ac0:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
            400ac4:	e8 d7 ff ff ff       	callq  400aa0 <printTree>
            400ac9:	8b 53 04             	mov    0x4(%rbx),%edx
            400acc:	8b 33                	mov    (%rbx),%esi
            400ace:	31 c0                	xor    %eax,%eax
            400ad0:	bf 88 0e 40 00       	mov    $0x400e88,%edi
            400ad5:	e8 46 fb ff ff       	callq  400620 <printf@plt>
            400ada:	48 8b 5b 10          	mov    0x10(%rbx),%rbx
            400ade:	48 85 db             	test   %rbx,%rbx
            400ae1:	75 dd                	jne    400ac0 <printTree+0x20>
            400ae3:	48 83 c4 08          	add    $0x8,%rsp
            400ae7:	5b                   	pop    %rbx
            400ae8:	5d                   	pop    %rbp
            400ae9:	c3                   	retq   
            400aea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

	- In the main() method, the unooptimized code moves the value of “low” around twice, whereas the optimized code moes it directly into the register where it will be used.

	  Original method (O0):

	  4008dc:	e8 3a ff ff ff       	callq  40081b <obtainNumberBetween>
          4008e1:	89 05 b5 17 20 00    	mov    %eax,0x2017b5(%rip)        # 60209c <low>
          4008e7:	8b 05 af 17 20 00    	mov    0x2017af(%rip),%eax        # 60209c <low>
          4008ed:	ba ff 7f 00 00       	mov    $0x7fff,%edx
          4008f2:	89 c6                	mov    %eax,%esi
          4008f4:	bf 8c 0e 40 00       	mov    $0x400e8c,%edi
          4008f9:	e8 1d ff ff ff       	callq  40081b <obtainNumberBetween>

	  Opitmized method (O2):

	  4006dd:	e8 0e 02 00 00       	callq  4008f0 <obtainNumberBetween>
          4006e2:	ba ff 7f 00 00       	mov    $0x7fff,%edx
          4006e7:	89 c6                	mov    %eax,%esi
          4006e9:	bf 5f 0e 40 00       	mov    $0x400e5f,%edi
          4006ee:	89 05 a8 19 20 00    	mov    %eax,0x2019a8(%rip)        # 60209c <low>
          4006f4:	e8 f7 01 00 00       	callq  4008f0 <obtainNumberBetween>
